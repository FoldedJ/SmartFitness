{"remainingRequest":"E:\\SmartFitness\\smart-fitness-view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\SmartFitness\\smart-fitness-view\\src\\components\\CozeFloatingWindow.vue?vue&type=style&index=0&id=38348fbd&scoped=true&lang=css&","dependencies":[{"path":"E:\\SmartFitness\\smart-fitness-view\\src\\components\\CozeFloatingWindow.vue","mtime":1749642777825},{"path":"E:\\SmartFitness\\smart-fitness-view\\node_modules\\css-loader\\dist\\cjs.js","mtime":1749639516075},{"path":"E:\\SmartFitness\\smart-fitness-view\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1749639525775},{"path":"E:\\SmartFitness\\smart-fitness-view\\node_modules\\postcss-loader\\src\\index.js","mtime":1749639521038},{"path":"E:\\SmartFitness\\smart-fitness-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1749639512193},{"path":"E:\\SmartFitness\\smart-fitness-view\\node_modules\\vue-loader\\lib\\index.js","mtime":1749639525774}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvemUtZmxvYXRpbmctd2luZG93IHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgcmlnaHQ6IDIwcHg7CiAgYm90dG9tOiAyMHB4OwogIHotaW5kZXg6IDk5OTk7CiAgZm9udC1mYW1pbHk6ICdQaW5nRmFuZyBTQycsICdNaWNyb3NvZnQgWWFIZWknLCBzYW5zLXNlcmlmOwp9CgouZmxvYXRpbmctYnV0dG9uIHsKICB3aWR0aDogNjBweDsKICBoZWlnaHQ6IDYwcHg7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIGJhY2tncm91bmQtY29sb3I6ICMxNTU1OWE7CiAgY29sb3I6IHdoaXRlOwogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBjdXJzb3I6IHBvaW50ZXI7CiAgYm94LXNoYWRvdzogMCA0cHggMTJweCByZ2JhKDAsIDAsIDAsIDAuMTUpOwogIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7Cn0KCi5mbG9hdGluZy1idXR0b24gaSB7CiAgZm9udC1zaXplOiAyNHB4Owp9CgouZmxvYXRpbmctYnV0dG9uOmhvdmVyIHsKICB0cmFuc2Zvcm06IHNjYWxlKDEuMDUpOwogIGJveC1zaGFkb3c6IDAgNnB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjIpOwp9CgouY2hhdC13aW5kb3cgewogIHdpZHRoOiAzNTBweDsKICBoZWlnaHQ6IDUwMHB4OwogIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgYm94LXNoYWRvdzogMCA0cHggMjBweCByZ2JhKDAsIDAsIDAsIDAuMTUpOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBvdmVyZmxvdzogaGlkZGVuOwogIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7Cn0KCi53aW5kb3ctaGVhZGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIHBhZGRpbmc6IDEycHggMTZweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTU1NTlhOwogIGNvbG9yOiB3aGl0ZTsKfQoKLnRpdGxlIHsKICBmb250LXdlaWdodDogYm9sZDsKICBmb250LXNpemU6IDE2cHg7Cn0KCi5jb250cm9scyBpIHsKICBtYXJnaW4tbGVmdDogMTJweDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgZm9udC1zaXplOiAxNnB4Owp9CgouY2hhdC1jb250ZW50IHsKICBmbGV4OiAxOwogIHBhZGRpbmc6IDE2cHg7CiAgb3ZlcmZsb3cteTogYXV0bzsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5Owp9CgoubWVzc2FnZSB7CiAgbWFyZ2luLWJvdHRvbTogMTJweDsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47Cn0KCi51c2VyLW1lc3NhZ2UgewogIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDsKfQoKLmFpLW1lc3NhZ2UgewogIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0Owp9CgoubWVzc2FnZS1jb250ZW50IHsKICBtYXgtd2lkdGg6IDgwJTsKICBwYWRkaW5nOiAxMHB4IDE0cHg7CiAgYm9yZGVyLXJhZGl1czogMThweDsKICB3b3JkLWJyZWFrOiBicmVhay13b3JkOwogIGxpbmUtaGVpZ2h0OiAxLjU7CiAgZm9udC1zaXplOiAxNHB4Owp9CgoucmV0cnktYnV0dG9uLWNvbnRhaW5lciB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBtYXJnaW4tdG9wOiA4cHg7CiAgbWFyZ2luLWJvdHRvbTogMTJweDsKfQoKLnVzZXItbWVzc2FnZSAubWVzc2FnZS1jb250ZW50IHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTU1NTlhOwogIGNvbG9yOiB3aGl0ZTsKICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4Owp9CgouYWktbWVzc2FnZSAubWVzc2FnZS1jb250ZW50IHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllOWViOwogIGNvbG9yOiAjMzMzOwogIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDRweDsKfQoKLmxvYWRpbmctaW5kaWNhdG9yIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgY29sb3I6ICM5OTk7CiAgZm9udC1zaXplOiAxNHB4OwogIG1hcmdpbjogOHB4IDA7Cn0KCi5sb2FkaW5nLWluZGljYXRvciBpIHsKICBtYXJnaW4tcmlnaHQ6IDZweDsKfQoKLmlucHV0LWFyZWEgewogIHBhZGRpbmc6IDEycHg7CiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlZWU7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogZmxleC1lbmQ7Cn0KCi5pbnB1dC1hcmVhIC5lbC10ZXh0YXJlYSB7CiAgZmxleDogMTsKICBtYXJnaW4tcmlnaHQ6IDhweDsKfQoKLmlucHV0LWFyZWEgLmVsLWJ1dHRvbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzE1NTU5YTsKICBib3JkZXItY29sb3I6ICMxNTU1OWE7Cn0K"},{"version":3,"sources":["CozeFloatingWindow.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"CozeFloatingWindow.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"coze-floating-window\" :class=\"{ 'minimized': minimized }\">\n    <!-- 悬浮按钮 -->\n    <div class=\"floating-button\" @click=\"toggleWindow\" v-if=\"minimized\">\n      <i class=\"el-icon-s-promotion\"></i>\n    </div>\n    \n    <!-- 聊天窗口 -->\n    <div class=\"chat-window\" v-else>\n      <!-- 窗口标题栏 -->\n      <div class=\"window-header\">\n        <div class=\"title\">健康智能助手</div>\n        <div class=\"controls\">\n          <i class=\"el-icon-minus\" @click=\"minimizeWindow\"></i>\n          <i class=\"el-icon-close\" @click=\"closeWindow\"></i>\n        </div>\n      </div>\n      \n      <!-- 聊天内容区域 -->\n      <div class=\"chat-content\" ref=\"chatContent\">\n        <div v-for=\"(message, index) in messages\" :key=\"index\" \n             :class=\"['message', message.type === 'user' ? 'user-message' : 'ai-message']\">\n          <div class=\"message-content\">{{ message.content }}</div>\n          <!-- 重试按钮 -->\n          <div v-if=\"message.isRetryPrompt\" class=\"retry-button-container\">\n            <el-button size=\"small\" type=\"primary\" @click=\"retryLastMessage\" :disabled=\"loading\">\n              <i class=\"el-icon-refresh-right\"></i> 重试\n            </el-button>\n          </div>\n        </div>\n        <div v-if=\"loading\" class=\"loading-indicator\">\n          <i class=\"el-icon-loading\"></i> 思考中...\n        </div>\n      </div>\n      \n      <!-- 输入区域 -->\n      <div class=\"input-area\">\n        <el-input\n          v-model=\"userInput\"\n          type=\"textarea\"\n          :rows=\"2\"\n          placeholder=\"请输入您的问题...\"\n          @keyup.enter.native=\"sendMessage\"\n        ></el-input>\n        <el-button type=\"primary\" icon=\"el-icon-s-promotion\" @click=\"sendMessage\" :loading=\"loading\">\n          发送\n        </el-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { callCozeWorkflowWithSDK } from '@/api/cozeWorkflow';\n\nexport default {\n  name: 'CozeFloatingWindow',\n  props: {\n    workflowId: {\n      type: String,\n      default: '7514339234321629220' // 默认工作流ID\n    }\n  },\n  data() {\n    return {\n      minimized: true, // 默认最小化\n      userInput: '',\n      messages: [\n        { type: 'ai', content: '您好！我是您的健康智能助手，请问有什么可以帮助您的？' }\n      ],\n      loading: false\n    };\n  },\n  mounted() {\n    // 初始化时检查是否可以正常加载\n    this.checkConnection();\n  },\n  methods: {\n    // 检查与扣子AI工作流的连接\n    async checkConnection() {\n      try {\n        // 获取token\n        const token = localStorage.getItem('cozeToken');\n        \n        // 如果没有token，尝试使用默认token\n        if (!token) {\n          console.warn('未设置扣子AI工作流token，将使用默认token');\n        }\n        \n        // 测试API连接\n        const response = await fetch('https://api.coze.cn/workflows/ping', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token || 'pat_ZR3dhICDUSMapWasnt1NKW29LcoyvZlRVdKZetwZ5moYxCdzZq8Ju8MUGZmQoF2A'}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (!response.ok) {\n          // 检查是否是授权问题\n          if (response.status === 401 || response.status === 403) {\n            throw new Error(`授权失败: token可能已过期或无效 (状态码: ${response.status})`);\n          }\n          throw new Error(`连接测试失败: ${response.status} - ${response.statusText}`);\n        }\n        \n        console.log('扣子AI工作流连接测试成功');\n      } catch (error) {\n        console.error('扣子AI工作流连接测试失败:', error);\n        \n        // 创建增强的错误对象\n        const enhancedError = new Error(`连接测试失败: ${error.message}`);\n        enhancedError.originalError = error;\n        enhancedError.isTokenError = error.message.includes('授权失败') || \n                                    error.message.includes('token') || \n                                    error.message.includes('401') || \n                                    error.message.includes('403');\n        \n        // 发送错误到父组件\n        this.$emit('error', enhancedError);\n      }\n    },\n    \n    // 切换窗口状态\n    toggleWindow() {\n      this.minimized = !this.minimized;\n      if (!this.minimized) {\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      }\n    },\n    \n    // 最小化窗口\n    minimizeWindow() {\n      this.minimized = true;\n    },\n    \n    // 关闭窗口\n    closeWindow() {\n      this.minimized = true;\n    },\n    \n    // 发送消息\n    async sendMessage() {\n      if (!this.userInput.trim() || this.loading) return;\n      \n      // 添加用户消息\n      const userMessage = this.userInput.trim();\n      this.messages.push({ type: 'user', content: userMessage });\n      this.userInput = '';\n      this.loading = true;\n      \n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n      \n      try {\n        // 调用扣子AI工作流\n        let aiResponse = '';\n        let responseReceived = false;\n        \n        // 显示正在连接的提示\n        this.messages.push({ type: 'ai', content: '正在连接智能助手...' });\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n        \n        // 使用增强版axios流式调用工作流\n        await callCozeWorkflowWithSDK(\n          this.workflowId,\n          { input: JSON.stringify(userMessage) },\n          null, // 使用默认token\n          (chunk) => {\n            // 收到第一个响应时，移除\"正在连接\"消息\n            if (!responseReceived) {\n              responseReceived = true;\n              // 移除最后一条消息（正在连接提示）\n              this.messages.pop();\n            }\n            \n            // 处理流式响应\n            if (chunk && chunk.data) {\n              try {\n                // 尝试解析JSON响应\n                const jsonData = JSON.parse(chunk.data);\n                if (jsonData && jsonData.data && jsonData.data.output) {\n                  aiResponse = jsonData.data.output;\n                } else if (jsonData && jsonData.output) {\n                  aiResponse = jsonData.output;\n                }\n              } catch (e) {\n                // 如果不是JSON格式，可能是纯文本响应\n                console.log('收到非JSON响应:', chunk.data);\n                // 尝试从响应中提取有用信息\n                const dataMatch = chunk.data.match(/\"data\"\\s*:\\s*\"([^\"]+)\"/i);\n                if (dataMatch && dataMatch[1]) {\n                  aiResponse = dataMatch[1];\n                } else if (chunk.data.includes('output')) {\n                  const outputMatch = chunk.data.match(/\"output\"\\s*:\\s*\"([^\"]+)\"/i);\n                  if (outputMatch && outputMatch[1]) {\n                    aiResponse = outputMatch[1];\n                  }\n                }\n              }\n            }\n          }\n        );\n        \n        // 如果没有收到任何响应（连接成功但没有内容）\n        if (responseReceived && !aiResponse) {\n          this.messages.push({ type: 'ai', content: '抱歉，我无法理解您的问题，请重新描述。' });\n        } \n        // 如果收到了响应\n        else if (aiResponse) {\n          this.messages.push({ type: 'ai', content: aiResponse });\n        } \n        // 如果连接都没成功\n        else {\n          this.messages.push({ type: 'ai', content: '抱歉，无法连接到智能助手服务，请检查网络连接后重试。' });\n        }\n      } catch (error) {\n        console.error('调用AI工作流失败:', error);\n        \n        // 根据错误类型提供不同的错误消息\n        let errorMessage = '抱歉，服务暂时不可用，请稍后再试。';\n        \n        // 检查是否是token错误\n        if (error.isTokenError || \n            (error.message && (error.message.includes('授权失败') || \n                              error.message.includes('令牌') || \n                              error.message.includes('token')))) {\n          errorMessage = '智能助手授权失败，请联系管理员更新访问令牌。';\n        } \n        // 检查是否是网络错误\n        else if (error.message && (error.message.includes('Network') || \n                                  error.message.includes('网络') || \n                                  error.message.includes('timeout') || \n                                  error.message.includes('超时'))) {\n          errorMessage = '网络连接失败，请检查您的网络连接后重试。';\n        }\n        \n        this.messages.push({ type: 'ai', content: errorMessage });\n        \n        // 添加重试按钮的消息\n        this.messages.push({ \n          type: 'ai', \n          content: '您可以点击下方按钮重试，或者稍后再试。',\n          isRetryPrompt: true\n        });\n        \n        // 通知父组件出现错误\n        this.$emit('error', error);\n      } finally {\n        this.loading = false;\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      }\n    },\n    \n    // 滚动到底部\n    scrollToBottom() {\n      if (this.$refs.chatContent) {\n        this.$refs.chatContent.scrollTop = this.$refs.chatContent.scrollHeight;\n      }\n    },\n    \n    // 重试上一条用户消息\n    retryLastMessage() {\n      // 查找最后一条用户消息\n      const lastUserMessageIndex = [...this.messages].reverse()\n        .findIndex(msg => msg.type === 'user');\n      \n      if (lastUserMessageIndex !== -1) {\n        const lastUserMessage = this.messages[this.messages.length - 1 - lastUserMessageIndex];\n        \n        // 移除所有错误相关的消息（从用户消息之后的所有AI消息）\n        const userMessagePosition = this.messages.length - 1 - lastUserMessageIndex;\n        this.messages = this.messages.slice(0, userMessagePosition + 1);\n        \n        // 重新发送该消息\n        this.userInput = lastUserMessage.content;\n        this.sendMessage();\n      } else {\n        // 如果没有找到用户消息，添加提示\n        this.messages.push({ \n          type: 'ai', \n          content: '没有找到可以重试的消息，请输入新的问题。' \n        });\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.coze-floating-window {\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  z-index: 9999;\n  font-family: 'PingFang SC', 'Microsoft YaHei', sans-serif;\n}\n\n.floating-button {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background-color: #15559a;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  transition: all 0.3s ease;\n}\n\n.floating-button i {\n  font-size: 24px;\n}\n\n.floating-button:hover {\n  transform: scale(1.05);\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n}\n\n.chat-window {\n  width: 350px;\n  height: 500px;\n  border-radius: 10px;\n  background-color: white;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.window-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 16px;\n  background-color: #15559a;\n  color: white;\n}\n\n.title {\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.controls i {\n  margin-left: 12px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n.chat-content {\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  background-color: #f9f9f9;\n}\n\n.message {\n  margin-bottom: 12px;\n  display: flex;\n  flex-direction: column;\n}\n\n.user-message {\n  align-items: flex-end;\n}\n\n.ai-message {\n  align-items: flex-start;\n}\n\n.message-content {\n  max-width: 80%;\n  padding: 10px 14px;\n  border-radius: 18px;\n  word-break: break-word;\n  line-height: 1.5;\n  font-size: 14px;\n}\n\n.retry-button-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 8px;\n  margin-bottom: 12px;\n}\n\n.user-message .message-content {\n  background-color: #15559a;\n  color: white;\n  border-bottom-right-radius: 4px;\n}\n\n.ai-message .message-content {\n  background-color: #e9e9eb;\n  color: #333;\n  border-bottom-left-radius: 4px;\n}\n\n.loading-indicator {\n  display: flex;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  margin: 8px 0;\n}\n\n.loading-indicator i {\n  margin-right: 6px;\n}\n\n.input-area {\n  padding: 12px;\n  border-top: 1px solid #eee;\n  display: flex;\n  align-items: flex-end;\n}\n\n.input-area .el-textarea {\n  flex: 1;\n  margin-right: 8px;\n}\n\n.input-area .el-button {\n  background-color: #15559a;\n  border-color: #15559a;\n}\n</style>"]}]}